// Prisma schema for ERP System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

////// ðŸš€ AUTH & USERS //////

model User {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  email          String          @unique
  password       String
  phone          String
  address        String?
  employeeId     String          @unique
  position       String?
  salary         Float?
  department     String
  role           String // admin, employee, hr, finance, sales, etc.
  resetToken     String? // Stores the verification code for password reset
  tokenExpiry    DateTime? // Expiry for reset token
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  supportTickets SupportTicket[] // Added opposite relation field for SupportTicket
}

////// ðŸš€ DEPARTMENTS //////

model Department {
  id        String     @id @default(auto()) @map("_id") @db.ObjectId
  name      String     @unique
  employees Employee[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

////// ðŸš€ EMPLOYEES //////

model Employee {
  id           String       @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  email        String       @unique
  phone        String
  department   Department   @relation(fields: [departmentId], references: [id])
  departmentId String       @db.ObjectId
  position     String
  salary       Float
  hireDate     DateTime     @default(now())
  status       String // active, inactive, terminated
  documents    String[] // List of uploaded document URLs
  payrolls     Payroll[] // Added opposite relation field
  attendances  Attendance[] // Added opposite relation field for Attendance
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
}

////// ðŸš€ SALES & CRM //////

model Customer {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  phone     String
  company   String?
  orders    Order[]
  invoices  Invoice[] // Added opposite relation field for Invoice
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Order {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  customer    Customer    @relation(fields: [customerId], references: [id])
  customerId  String      @db.ObjectId
  items       OrderItem[]
  totalAmount Float
  status      String // pending, completed, canceled
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model OrderItem {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id])
  orderId   String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  quantity  Int
  price     Float
}

////// ðŸš€ INVENTORY MANAGEMENT //////

model Product {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  sku         String      @unique
  description String?
  category    String
  stock       Int
  price       Float
  supplier    Supplier    @relation(fields: [supplierId], references: [id])
  supplierId  String      @db.ObjectId
  orderItems  OrderItem[] // Added opposite relation field
  workOrders  WorkOrder[] // Added opposite relation field for WorkOrder
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Supplier {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String    @unique
  phone     String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

////// ðŸš€ HR & PAYROLL //////

model Payroll {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
  baseSalary Float
  deductions Float
  bonuses    Float
  netSalary  Float
  payDate    DateTime
  status     String // processed, pending
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Attendance {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee  @relation(fields: [employeeId], references: [id])
  employeeId String    @db.ObjectId
  checkIn    DateTime?
  checkOut   DateTime?
  workHours  Float?
  status     String // present, absent, leave
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}

////// ðŸš€ FINANCE //////

model Invoice {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  customer   Customer @relation(fields: [customerId], references: [id])
  customerId String   @db.ObjectId
  amount     Float
  dueDate    DateTime
  status     String // paid, unpaid, overdue
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  category    String
  amount      Float
  description String?
  date        DateTime
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

////// ðŸš€ PRODUCTION MANAGEMENT //////

model WorkOrder {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  product   Product   @relation(fields: [productId], references: [id])
  productId String    @db.ObjectId
  quantity  Int
  status    String // pending, in progress, completed
  startDate DateTime?
  endDate   DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

////// ðŸš€ SUPPORT & TICKETS //////

model SupportTicket {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  issue     String
  status    String // open, in progress, closed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
