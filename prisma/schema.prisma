// Prisma schema for ERP System

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  email       String    @unique
  password    String
  phone       String
  address     String?
  employeeId  String    @unique
  position    String?
  salary      Float?
  photo       String?
  department  String
  role        String
  resetToken  String?
  tokenExpiry DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  payrolls      Payroll[]             @relation("UserToPayroll")
  feedbacks     PerformanceFeedback[] @relation("UserToPerformanceFeedback")
  announcements Announcement[]        @relation("UserToAnnouncement")
  tickets       Ticket[]              @relation("UserToTicket")
}

model Customer {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  contact     String
  status      String
  description String?
  location    String?
  docUrl      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SalesOrder {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  customerName String
  quantity     Int
  product      String
  price        Float
  status       String   @default("Pending")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Product {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  productId   String   @unique
  category    String
  description String?
  b2bPrice    Float?
  b2cPrice    Float?
  stock       Int
  imageUrl    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  stockMovements StockMovement[]   @relation(fields: [], references: [])
  inventories    Inventory[]       @relation("ProductToInventory")
  allocations    StockAllocation[] @relation("ProductToStockAllocation")
  productOrders  ProductionOrder[] @relation("ProductToProductionOrder")
}

model ProductionOrder {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  productId   String   @db.ObjectId
  product     Product  @relation("ProductToProductionOrder", fields: [productId], references: [id])
  productName String
  warehouse   String
  quantity    Int
  status      String   @default("Pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  message   String
  type      String
  isRead    Boolean  @default(false)
  userId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model MarketplaceOrder {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  platform     String
  customerName String
  status       String
  description  String
  createdAt    DateTime @default(now())
}

model WorkOrder {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  workOrderName  String
  workOrderId    String   @unique
  assignedTo     String
  startDate      String
  completionDate String
  efficiency     String
  description    String?
  documentUrl    String?
  status         String   @default("Pending")
  createdAt      DateTime @default(now())
}

model Inspection {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  batchId          String
  inspectionStatus String
  defectType       String
  assignedTo       String
  reworkStatus     String   @default("started")
  description      String?
  documentUrl      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Workstation {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  workstationName  String
  assignedTo       String
  currentOperation String
  productionTime   String
  utilization      String
  description      String?
  documentUrl      String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

model Invoice {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber String   @unique
  date          String
  customerName  String
  description   String?
  amount        Float
  status        String
  type          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  payments Payment[] @relation("InvoiceToPayment")
}

model Payment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      String
  method    String
  amount    Float
  invoiceId String   @db.ObjectId
  invoice   Invoice  @relation("InvoiceToPayment", fields: [invoiceId], references: [id])
  refund    Refund?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Refund {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      String
  method    String
  amount    Float
  status    String
  paymentId String   @unique @db.ObjectId
  payment   Payment  @relation(fields: [paymentId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaxReport {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  reportType  String
  period      String
  amount      Float
  status      String
  dueDate     String?
  documentUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model SalesTaxEntry {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  invoiceNumber String
  date          String
  taxType       String
  amount        Float
  status        String
  createdAt     DateTime @default(now())
}

model TaxAuditTrail {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  action    String
  user      String
  timestamp DateTime @default(now())
}

model ChartOfAccount {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  type        String // Asset, Liability, Revenue, Expense
  balance     Float    @default(0)
  description String?
  status      String   @default("Active") // Active, Inactive
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model TaxCategory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  percentage Float
  region     String
  status     String   @default("Active") // Active, Inactive
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model CostCenter {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  departmentName  String
  budgetAllocated Float
  amountSpent     Float
  remaining       Float
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Staff {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  name            String
  contact         String
  address         String?
  designation     String
  department      String
  salary          Float
  dateOfJoining   DateTime
  terminationDate DateTime?
  documentUrl     String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Payroll {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  employeeId    String @db.ObjectId
  basicSalary   Float
  deductions    Float
  bonuses       Float
  netSalary     Float
  payslipStatus String
  employee      User   @relation("UserToPayroll", fields: [employeeId], references: [id])
}

model PerformanceFeedback {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId            String   @db.ObjectId
  employee              User     @relation("UserToPerformanceFeedback", fields: [employeeId], references: [id])
  workEfficiencyScore   Int
  targetCompletionRate  Int
  attendancePunctuality Int
  feedbackRatings       String
  description           String?
  lastAppraisalInfo     String?
  performanceScore      Float
  managerFeedback       String?
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Announcement {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  postedBy    String   @db.ObjectId
  user        User     @relation("UserToAnnouncement", fields: [postedBy], references: [id])
  dateTime    DateTime
  description String
  documentUrl String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Ticket {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  employeeId  String   @db.ObjectId
  employee    User     @relation("UserToTicket", fields: [employeeId], references: [id])
  issueType   String
  description String
  documentUrl String?
  status      String   @default("Pending")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model StockMovement {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  productId     String   @db.ObjectId
  product       Product  @relation(fields: [productId], references: [id])
  quantity      Int // Positive for stock addition, negative for removal
  fromWarehouse String? // Warehouse from which stock is moved
  toWarehouse   String? // Warehouse to which stock is moved
  type          String? // "IN" for stock received, "OUT" for stock sold or used
  createdAt     DateTime @default(now())
}

model Inventory {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  productId  String   @db.ObjectId
  product    Product  @relation("ProductToInventory", fields: [productId], references: [id])
  stockLevel Int // Available stock in the warehouse
  warehouse  String // Warehouse location (e.g., "Warehouse 1")
  minStock   Int // Minimum stock threshold to trigger alerts
  maxStock   Int // Maximum stock capacity
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model StockAllocation {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  date        DateTime
  batchNo     String
  production  String
  materials   String
  status      String
  description String?

  // Relation to Product
  productId String  @db.ObjectId
  product   Product @relation("ProductToStockAllocation", fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}
